#!/usr/bin/env node

const path = require('path');
const eslint = require('eslint');
const packageJson = require('../package.json');
const { program } = require('commander');
const expandPath = require('../lib/expand-path.js');
const pad = require('../lib/pad.js');

program.version(packageJson.version);
program
  .requiredOption('-p --path <path>', 'The path the root directory of the game')
  .option('-c --exit-code <number>', 'The exit code to use when failing', '3');

program.parse(process.argv);

const gameFullPath = expandPath(program.path);
const configFullPath = path.resolve(__dirname, '../config/eslint.json');
const cliEngine = new eslint.CLIEngine({
  configFile: configFullPath,
  cwd: gameFullPath,
  extensions: [ '.js', '.ts' ],
  ignorePattern: [],
  useEslintrc: false,
});

const report = cliEngine.executeOnFiles([ 'src/' ]);

const exitCode = report.errorCount === 0 ? 0 : program.exitCode;

for (const record of report.results) {
  if (record.errorCount === 0) {
    continue;
  }

  console.error(`${record.filePath}`);
  for (const message of record.messages) {
    const lineNumber = pad.left(`${message.line}`, 4, ' ');
    const column = pad.right(`${message.column}`, 4, ' ');
    const rule = pad.left(`${message.ruleId}`, 25, ' ');
    const paddedMessage = pad.left(`${message.message}`, 50, ' ');
    console.log(`${lineNumber}:${column} ${rule} ${paddedMessage}`);
  }
}

process.exit(exitCode);
