const packageJson = require('../package.json');
const { program } = require('commander');

const path = require('path');
const fs = require('fs');
const promisify = require('util').promisify;
const imageSize = require('image-size');
const musicMetadata = require('music-metadata');

const { isDirectory } = require('../lib/path-validation.js');

const scanConfig = require('../config/srasConfig.json');
const rules = scanConfig.rules || {};
const imgRules = rules.images || {};
const audRules = rules.audio || {};
const requiredTypes = (
    Object.keys(imgRules).filter(i => !!imgRules[i].require).concat(
    Object.keys(audRules).filter(i => !!audRules[i].require))
);
const ignored = new RegExp((scanConfig.ignore || []).join('|'));
const unpermitted = new RegExp((scanConfig.unpermitted || []).join('|'));

let scannedFiles = 0;
let skippedFiles = 0;
let ignoredFiles = 0;

const scannedTypes = {};
const unpermittedTypes = {};
const scanReports = [];

const fsReadDir = promisify(fs.readdir);
const fsStat = promisify(fs.stat);
const sizeOf = promisify(imageSize);

const getExtension = p => (/[.]/.exec(p)) ? /[^.]+$/.exec(p)[0] : undefined;
const isPowerOfTwo = num => (num !== 0) && ((num & (num - 1)) === 0);
const formatFileSize = size => {
    const units = ["B", "KB", "MB", "GB", "TB"]
    let i = 0;
    for (; size >= 1024 && i < units.length; i++) {
        size /= 1024;
    }
    return `${Math.round(size * 100) / 100} ${units[i]}`;
};
const formatTime = time => {
    const milliseconds = time % 1000;
    const seconds = Math.floor((time / 1000) % 60);
    const minutes = Math.floor((time / (1000 * 60)) % 60);
    const hours = Math.floor(time / (1000 * 60 * 60));

    const formatted = [];
    if (hours > 0) {
        formatted.push(`${hours}h`);
    }
    if (minutes > 0) {
        formatted.push(`${minutes}m`);
    }
    if (seconds > 0) {
        formatted.push(`${seconds}s`);
    }
    formatted.push(`${milliseconds}ms`);

    return formatted.join(' ');
};
const fail = err => {
    console.log("Scan failed:");
    console.error(err);
    process.exit(0);
};

program.version(packageJson);
program
    .requiredOption('-p --path <path>', 'The path to the deploy directory from which to begin scanning assets')
    .option('-c --exit-code <number>', 'The exit code to use when failing', '3');

program.parse(process.argv);

if (!isDirectory(program.path)) {
    fail(`Folder [path = ${program.path}] does not exist`);
}

console.log(`Scanning assets at [path = ${program.path}]`);

const scanImage = async (filePath, scanRules) => {
    try {
        const stat = await fsStat(filePath);
        const dimensions = await sizeOf(filePath);

        const maxWidth = scanRules.maxWidth || Infinity;
        const maxHeight = scanRules.maxHeight || Infinity;
        const maxSize = scanRules.maxSize || Infinity;

        const fileName = filePath.split("\\").pop();

        if (dimensions.width > maxWidth || dimensions.height > maxHeight) {
            scanReports.push(
                `Image is larger than the recommended max dimensions [recommended = ${maxHeight}x${maxHeight}], [${fileName} = ${dimensions.width}x${dimensions.height}]`
            );
        }

        if (!!scanRules.powerOfTwo && (!isPowerOfTwo(dimensions.width) || !isPowerOfTwo(dimensions.height))) {
            scanReports.push(
                `Image dimensions are recommended to be powers of two [${fileName} = ${dimensions.width}x${dimensions.height}]`
            );
        }

        if (maxSize > 0 && stat.size > maxSize) {
            scanReports.push(
                `Image file size is larger than the recommended file size [recommended = ${formatFileSize(maxSize)}], [${fileName} = ${formatFileSize(stat.size)}]`
            );
        }
    }
    catch (err) {
        fail(err);
    }
};

const scanAudio = async (filePath, scanRules) => {
    try {
        const stat = await fsStat(filePath);
        const metadata = await musicMetadata.parseFile(filePath);

        const maxSize = scanRules.maxSize || 0;
        const maxChannels = scanRules.maxChannels || 0;
        const sampleRate = scanRules.sampleRate || 0;
        const duration = scanRules.duration || 0;

        const fileName = filePath.split("\\").pop();

        if (maxSize > 0 && stat.size > maxSize) {
            scanReports.push(
                `Audio file size is larger than the recommended file size [recommended = ${formatFileSize(maxSize)}], [${fileName} = ${formatFileSize(stat.size)}]`
            );
        }

        if (maxChannels > 0 && metadata.format.numberOfChannels > maxChannels) {
            scanReports.push(
                `Audio file contains more than the recommended number of channels [recommended = ${maxChannels}], [${fileName} = ${metadata.format.numberOfChannels}]`
            );
        }

        if (sampleRate > 0 && metadata.format.sampleRate !== sampleRate) {
            scanReports.push(
                `Audio smaple rate does not match the recommended sample rate [recommended = ${sampleRate}], [${fileName} = ${metadata.format.sampleRate}]`
            );
        }

        const convertedDuration = metadata.format.duration * 1000; // S to MS
        if (duration > 0 && convertedDuration > duration) {
            scanReports.push(
                `Audio smaple duration is larger than recommended duration [recommended = ${duration}], [${fileName} = ${convertedDuration}]`
            );
        }
    }
    catch (err) {
        fail(err);
    }
};

const scaneDirectory = async filePath => {
    if (!isDirectory(filePath)) {
        const ext = getExtension(filePath);

        if (ignored.test(ext)) {
            // Track total ignored files.
            ignoredFiles++;
            return;
        }
        else if (unpermitted.test(ext)) {
            // Track how times we have scanned an this unpermitted file type.
            unpermittedTypes[ext] = (unpermittedTypes[ext] || 0) + 1;
            skippedFiles++; // skipped or ignored ??????
            return;
        }

        // Check if there is a rule category for this file extension.
        const hasImgRule = imgRules[ext] !== undefined;
        const hasAudRule = !hasImgRule && audRules[ext] !== undefined;
        
        if (hasImgRule) {
            await scanImage(filePath, imgRules[ext]);
        }
        else if (hasAudRule) {
            await scanAudio(filePath, audRules[ext]);
        }
        else {
            // Cannot find rules for this file type so it will be skipped.
            // Track total skipped files.
            skippedFiles++;
            return;
        }

        // Track how many times we have scanned this file type.
        scannedTypes[ext] = (scannedTypes[ext] || 0) + 1;

        // Track total scanned files.
        scannedFiles++;
    }
    else {
        try {
            const files = await fsReadDir(filePath);
            for (let i = 0; i < files.length; i++) {
                await scaneDirectory(path.join(filePath, files[i]));
            }
        }
        catch (err) {
            fail(err);
        }
    }
};

const assetScan = async () => {
    const startTime = Date.now();

    await scaneDirectory(program.path);

    const counts = [];
    const unpermittedReports = [];
    const missingRequiredReports = [];

    Object.keys(scannedTypes).forEach(i => counts.push(`${scannedTypes[i]} ${i}(s)`));
    Object.keys(unpermittedTypes).forEach(i => unpermittedReports.push(
        `Detected ${unpermittedTypes[i]} unpermitted file type(s) [type = ${i}]`
    ));

    requiredTypes.forEach(type => {
        if (scannedTypes[type] === undefined) {
            missingRequiredReports.push(`Could not find file types matching [type = ${type}]`);
        }
    });

    // RENDER SCAN REPORTS

    if (scanReports.length > 0) {
        console.log(scanReports.join('\n'));
    }
    if (unpermittedReports.length > 0) {
        console.log(unpermittedReports.join('\n'));
    }
    if (missingRequiredReports.length > 0) {
        console.log(missingRequiredReports.join('\n'));
    }

    console.log(`Scanned ${counts.join(', ')}`);
    console.log(`Scan complete [time = ${formatTime(Date.now() - startTime)}]: ${scannedFiles} file(s) scanned, ${skippedFiles} file(s) skipped, ${ignoredFiles} file(s) ignored`);

    process.exit(0);
};

// Begin scanning
assetScan();